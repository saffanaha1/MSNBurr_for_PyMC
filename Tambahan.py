# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1f9vqlYZzbcwJw31PnbJMkxyYKUbXvwQb

## Import Library
"""

!wget https://raw.githubusercontent.com/saffanaha1/MSNBurr_for_PyMC/main/MSNBurr_distribution.py -O MSNBurr_distribution.py
from MSNBurr_distribution import msnburr as msnburr
import math
import pymc as pm
import numpy as np
import pytensor.tensor as pt
import matplotlib.pyplot as plt
from pytensor.tensor import TensorVariable
from pymc.distributions.dist_math import check_parameters

"""
## Urgensi Modifikasi Rumus"""

def logp_asli(y: TensorVariable, mu: TensorVariable, sigma: TensorVariable, alpha: TensorVariable):
    omega = (1+(1/alpha))**(alpha+1)/np.sqrt(2*np.pi)
    epart = -omega/sigma*(y-mu)

    logpdf = pt.switch(
        pt.eq(y, -np.inf),
        -np.inf,
        pt.log(omega)-pt.log(sigma)-(omega/sigma*(y-mu))-((alpha+1)*pt.log(1+pt.exp(epart)/alpha))
    )

    return check_parameters(
        logpdf,
        alpha > 0,
        sigma > 0,
        msg=f"alpha must more than 0, sigma must more than 0",
    )

class msnburr_asli:
    def dist(mu, sigma, alpha, **kwargs):
        return pm.CustomDist.dist(
            mu, sigma, alpha,
            logp=logp_asli,
        )

mu = pt.scalar('mu')
sigma = pt.scalar('sigma')
alpha = pt.scalar('alpha')
value = pt.scalar('value')

rv = msnburr_asli.dist(mu=mu, sigma=sigma, alpha=alpha)
rv_logp = pm.logp(rv, value)
rv_logp_fn = pm.compile_pymc([value, mu, sigma, alpha], rv_logp)

# Menentukan rentang data
x = np.linspace(-8,1, 100)

# Menghitung probabilitas density
y1 = [math.exp(rv_logp_fn(value=x, mu=0.0, sigma=1, alpha=0.003)) for x in x]

# Plot density plot
plt.figure(figsize=(8,6))
plt.plot(x, y1, label='Sebelum Modifikasi', color='blue', linewidth=2.0)
plt.xlabel("x")
plt.ylabel("Density")
plt.legend(loc="upper left", fontsize=15)
plt.show()

"""## Prior

"""

import scipy.special as special
def skewness(alpha):
    skewness = (special.polygamma(2, alpha)-special.polygamma(2, 1))/(special.polygamma(1, alpha)+special.polygamma(1, 1))**(3/2)
    return skewness

x = np.linspace(0,15, 100)
y = [skewness(x) for x in x]
x1 = 10
y1 = skewness(x1)

# Membuat plot
plt.figure(figsize=(10, 6))
plt.plot(x, y, label='Skewness', color='blue')
plt.scatter(x1, y1, color='black')
plt.xlabel('Alpha')
plt.ylabel('Skewness')
plt.legend(fontsize=15)
plt.grid(True)
plt.show()

import math
import numpy as np
import matplotlib.pyplot as plt

value = pt.scalar("value")
rv = pm.Gamma.dist(alpha=2, beta=0.5)
rv_logp = pm.logp(rv, value)
rv_logp_fn = pm.compile_pymc([value], rv_logp)

x = np.linspace(0, 20, 1000)
y = [math.exp(rv_logp_fn(value=x)) for x in x]

# Plot density plot
plt.figure(figsize=(10, 5))
plt.plot(x, y, label=f'Gamma Distribution\nshape={2}, scale={0,5}', color='blue')
plt.title('Gamma Distribution wtih PyMC')
plt.xlabel('x')
plt.ylabel('Probability Density')
plt.legend()
plt.grid(True)
plt.show()

from scipy.stats import halfcauchy
x = np.linspace(0, 200, 1000)
y = halfcauchy.pdf(x, scale=30)

# Membuat plot
plt.figure(figsize=(8, 4))
plt.plot(x, y, label='Half Cauchy Distribution\nscale=5', color='red')
plt.title('Half Cauchy Distribution')
plt.xlabel('x')
plt.ylabel('Probability Density')
plt.legend()
plt.grid(True)
plt.show()

"""## Density Plot dari Distribusi Normal dan Logistik Amemiya"""

from scipy.stats import gamma, norm

# Membuat array nilai x untuk plot
x = np.linspace(-6, 6, 1000)
k =1.6

pdf_logit = k*np.exp(-k*x)/(1+np.exp(-k*x))**2
pdf_norm = norm.pdf(x, loc=0, scale=1)

# Membuat density plot menggunakan matplotlib
plt.figure(figsize=(10, 5))
plt.plot(x, pdf_norm, label='Distribusi Normal (0,1)', color='red')
plt.plot(x, pdf_logit, label='Distribusi Logistik Amemiya (0,1)', color='blue')


# Menambahkan judul dan label
plt.title('Density Plot dari Distribusi Normal dan Logistik Amemiya')
plt.xlabel('Nilai')
plt.ylabel('Density')
plt.legend(loc="upper left", fontsize=12)
# Menampilkan plot
plt.show()