# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WIyHBNZEC59j6Ce-8-TVyPMpOEfam1xW

### Import Library
"""

!wget https://raw.githubusercontent.com/saffanaha1/MSNBurr_for_PyMC/main/MSNBurr_distribution.py -O MSNBurr_distribution.py
from MSNBurr_distribution import msnburr as msnburr
import pytensor.tensor as pt
import pymc as pm
import numpy as np
import math
import matplotlib.pyplot as plt
import scipy.stats as st
import arviz as az


# import xarray as xr
# import pandas as pd
# import seaborn as sns
# import statsmodels.api as sm
# from scipy import stats
# from scipy.stats import skew
# from sklearn.metrics import mean_squared_error

sampler_kwargs = {
    "chains": 4,
    "cores": 4,
    "return_inferencedata": True,
    "random_seed": 42,
}

"""### Uji Coba Program

#### PDF
"""

mu = pt.scalar('mu')
sigma = pt.scalar('sigma')
alpha = pt.scalar('alpha')
value = pt.scalar('value')

rv = msnburr.dist(mu=mu, sigma=sigma, alpha=alpha)
rv_logp = pm.logp(rv, value)

# Use .eval() for debugging
p=(rv_logp.eval({value: 0.9, mu: 0.0, sigma:10.0, alpha:1.0}))
print(math.exp(p))

# Compile a function for repeated evaluations
rv_logp_fn = pm.compile_pymc([value, mu, sigma, alpha], rv_logp)
q = rv_logp_fn(value=-np.inf, mu=0, sigma=1, alpha=1)
print(math.exp(q))

# Menentukan rentang data
x = np.linspace(-8,1, 100)

# Menghitung probabilitas density
y1 = [math.exp(rv_logp_fn(value=x, mu=0.0, sigma=1, alpha=0.002)) for x in x]

# Plot density plot
plt.figure(figsize=(8,6))
plt.plot(x, y1, label='Setelah Modifikasi', color='blue', linewidth=2.0)
plt.xlabel("x")
plt.ylabel("Density")
plt.legend(loc="upper left", fontsize=15)
plt.show()

mu = 0
sigma = 1
# Menentukan rentang data
x = np.linspace(-6,5, 100)

# Menghitung probabilitas density
y1 = st.norm.pdf(x, mu, sigma)
y2 = [math.exp(rv_logp_fn(value=x, mu=0.0, sigma=1.0, alpha=1.0)) for x in x]
y3 = [math.exp(rv_logp_fn(value=x, mu=0.0, sigma=1.0, alpha=0.1)) for x in x]
y4 = [math.exp(rv_logp_fn(value=x, mu=0.0, sigma=1.0, alpha=5)) for x in x]
y5 = [math.exp(rv_logp_fn(value=x, mu=0.0, sigma=1.0, alpha=50)) for x in x]

# Plot density plot
plt.figure(figsize=(12,6))
plt.plot(x, y1, label='Normal(0, 1)', color='black', linestyle='dashed')
plt.plot(x, y2, label='MSNBurr(0, 1, 1)', color='red', linewidth=1.0)
plt.plot(x, y3, label='MSNBurr(0, 1, 0.1)', color='blue', linewidth=1.0)
plt.plot(x, y4, label='MSNBurr(0, 1, 5)', color='green', linewidth=1.0)
plt.plot(x, y5, label='MSNBurr(0, 1, 50)', color='purple', linewidth=1.0)
plt.xlabel("x")
plt.ylabel("Density")
plt.legend(loc="upper left")
plt.show()

"""#### CDF"""

mu = pt.scalar('mu')
sigma = pt.scalar('sigma')
alpha = pt.scalar('alpha')
value = pt.scalar('value')

rv = msnburr.dist(mu=mu, sigma=sigma, alpha=alpha)
rv_logcdf = pm.logcdf(rv, value)

# Use .eval() for debugging
p=(rv_logcdf.eval({value: -np.inf, mu: 0.0, sigma:10.0, alpha:1.0, }))
print(math.exp(p))

# Compile a function for repeated evaluations
rv_logcdf_fn = pm.compile_pymc([value, mu, sigma, alpha], rv_logcdf)
q = rv_logcdf_fn(value=0.1, mu=0, sigma=1, alpha=1.0)
print(math.exp(q))

mu = 0
sigma = 1
# Menentukan rentang data
x = np.linspace(-6,5, 100)

# Menghitung probabilitas density
y1 = st.norm.cdf(x, mu, sigma)
y2 = [math.exp(rv_logcdf_fn(value=x, mu=0.0, sigma=1.0, alpha=1.0)) for x in x]
y3 = [math.exp(rv_logcdf_fn(value=x, mu=0.0, sigma=1.0, alpha=0.1)) for x in x]
y4 = [math.exp(rv_logcdf_fn(value=x, mu=0.0, sigma=1.0, alpha=5)) for x in x]
y5 = [math.exp(rv_logcdf_fn(value=x, mu=0.0, sigma=1.0, alpha=50)) for x in x]

# Plot density plot
plt.figure(figsize=(12,6))
plt.plot(x, y1, label='Normal(0, 1)', color='black', linestyle='dashed')
plt.plot(x, y2, label='MSNBurr(0, 1, 1)', color='red', linewidth=1.0)
plt.plot(x, y3, label='MSNBurr(0, 1, 0.1)', color='blue', linewidth=1.0)
plt.plot(x, y4, label='MSNBurr(0, 1, 5)', color='green', linewidth=1.0)
plt.plot(x, y5, label='MSNBurr(0, 1, 50)', color='purple', linewidth=1.0)
plt.xlabel("x")
plt.ylabel("Cumulative")
plt.legend()
plt.show()

"""#### Momen"""

from pymc.initial_point import make_initial_point_fn
def test_moment(mu, sigma, alpha, size):
    with pm.Model() as model:
        msnburr("x", mu=mu, sigma=sigma, alpha=alpha, size=size)

    fn = make_initial_point_fn(
        model=model,
        return_transformed=False,
        default_strategy="moment",
    )
    moment = fn(0)["x"]
    print(moment)

test_moment(0,0.1,2,1)

"""#### Random"""

mu = 0
sigma = 1
alpha = 0.3

rv = msnburr.dist(mu, sigma, alpha)
hasilrandom = pm.draw(rv, draws=100)
hasilrandom

import seaborn as sns

plt.figure(figsize=(12,6))
x = np.linspace(-9, 4, 100)
y1 = sns.kdeplot(hasilrandom, fill=True, color="red", label='Data Bangkitan MSNBurr(0, 1, 0.3)')
y2 = [math.exp(rv_logp_fn(value=x, mu=0.0, sigma=1.0, alpha=0.3)) for x in x]

y1
plt.plot(x, y2, label='MSNBurr(0, 1, 0.3)', color='blue', linewidth=1.0)
plt.fill_between(x, y2, color="lightblue", alpha=0.5)
plt.legend()
plt.show()

"""### Validasi Output

#### PDF
"""

import pandas as pd
# Menentukan parameter yang akan digunakan
mu_grup = [-5, 0, 0.6, 9, 35]
sigma_grup = [0.1, 15, 30, 0.7]
alpha_grup = [0.4, 1, 17, 45]

# Nilai X yang akan dicari PDF dan CDFnya
x_grup = [-35.5, -5, -2.34, -10, 0, 20.22, 47, 13, 77, 5.76 ]

tabel_pdf = pd.DataFrame(columns=['X', 'mu', 'sigma', 'alpha', 'logpdf', 'PDF'])
tabel_cdf = pd.DataFrame(columns=['X', 'mu', 'sigma', 'alpha', 'logcdf', 'CDF'])

import random
for i in range(0,25):
    mu = random.choice(mu_grup)
    sigma = random.choice(sigma_grup)
    alpha = random.choice(alpha_grup)
    x = random.choice(x_grup)
    logpdf = rv_logp_fn(value=x, mu=mu, sigma=sigma, alpha=alpha)
    logcdf = rv_logcdf_fn(value=x, mu=mu, sigma=sigma, alpha=alpha)

    df_pdf = pd.DataFrame([{"X":x, "mu":mu, "sigma":sigma, "alpha":alpha, 'logpdf':np.round(logpdf, decimals=4), "PDF":np.round(math.exp(logpdf), decimals = 4)}])
    df_cdf = pd.DataFrame([{"X":x, "mu":mu, "sigma":sigma, "alpha":alpha, 'logcdf':np.round(logcdf, decimals=4), "CDF":np.round(math.exp(logcdf), decimals = 4)}])
    tabel_pdf = pd.concat([tabel_pdf, df_pdf], ignore_index=True)
    tabel_cdf = pd.concat([tabel_cdf, df_cdf], ignore_index=True)

tabel_pdf.to_csv('PDF.csv')
tabel_cdf.to_csv('CDF.csv')

from scipy.integrate import quad

def msnburr_pdf(x, mu, sigma, alpha):
  rv = msnburr.dist(mu,sigma,alpha)
  rv_logp = pm.logp(rv, x)
  return math.exp(rv_logp.eval())

def pembuktian1(mu, sigma, alpha):
  integral, error = quad(msnburr_pdf, -5, 10, args=(mu, sigma, alpha))
  return integral

def pembuktian2(mu, sigma, alpha):
  integral, error = quad(msnburr_pdf, -np.inf, 0.1, args=(mu, sigma, alpha))
  return integral

integral1 = pembuktian1(0, 1, 1)
integral2 = pembuktian2(0, 1, 1)
print(integral1)
print(integral2)

"""#### Random"""

def quantile(p, mu, sigma, alpha):
    omega = (1+(1/alpha))**(alpha+1)/np.sqrt(2*np.pi)
    q = mu - sigma/omega*(np.log(alpha)+np.log((p**(-1/alpha))-1))
    return q

p = quantile(p=0.7534389541609909,mu=0.0, sigma=10.0, alpha=1.0)
print(p)

"""### Validasi Hasil Estimasi Parameter

#### Bangkitkan Data
"""

data1 = msnburr.dist(mu=0, sigma=1, alpha=1)
data2 = msnburr.dist(mu=0, sigma=1, alpha=0.1)
data3 = msnburr.dist(mu=0, sigma=1, alpha=5)

hasilrandom = pm.draw(data3, draws=20000)

plt.hist(hasilrandom)
plt.show()

"""#### Buat Model"""

with pm.Model() as model1:
    mu = pm.Normal('mu',0,10)
    sigma = pm.HalfCauchy('sigma',10)
    alpha = pm.Gamma('alpha',2,0.1)

    msnburr(
        'MSNBurr',
        mu, sigma, alpha,
        hasilrandom
    )
with model1:
    trace_validasi = pm.sample(**sampler_kwargs)

az.plot_trace(trace_validasi)
az.summary(trace_validasi, round_to=3, hdi_prob=0.95)

"""#### Visualisasi"""

summary = az.summary(trace_validasi, round_to=3)
mean_values = summary['mean']
print(mean_values)

x = np.linspace(-5,15, 100)
y = [math.exp(rv_logp_fn(value=x, mu=mean_values[0], sigma=mean_values[1], alpha=mean_values[2])) for x in x]

fig, ax = plt.subplots(figsize=(8, 6))
ax.hist(hasilrandom, label='Data Simulasi', color='skyblue')
ax.set_xlabel("x")
legend = plt.legend(fontsize=13)
legend.set_bbox_to_anchor((0.775, 0.87), transform=plt.gcf().transFigure)

ax2 = ax.twinx()
ax2.plot(x, y, label='Hasil Estimasi Parameter', color='red', linewidth=1.5)
legend = plt.legend(fontsize=13)
legend.set_bbox_to_anchor((0.515, 0.81), transform=plt.gcf().transFigure)
plt.show()